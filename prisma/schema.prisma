// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Row {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  websiteId  String   @db.ObjectId
  website    Website  @relation(fields: [websiteId], references: [id])
  positionId String   @db.ObjectId
  position   Position @relation(fields: [positionId], references: [id])
  typeId     String   @db.ObjectId
  type       Type     @relation(fields: [typeId], references: [id])
  cells      Cell[]
}

model Website {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  url         String     @unique
  description String
  positions   Position[]
  rows        Row[]
}

model Position {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  websiteId String   @db.ObjectId
  website   Website  @relation(fields: [websiteId], references: [id])
  typeId    String   @db.ObjectId
  name      String
  dimension String
  platform  Platform @default(PC)
  demoList  Demo[]
  rows      Row[]
}

model Cell {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  headerId String @db.ObjectId
  header   Header @relation(fields: [headerId], references: [id])
  value    String
  rowId    String @db.ObjectId
  row      Row    @relation(fields: [rowId], references: [id])

  @@unique([headerId, rowId])
}

model Demo {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  display    String
  url        String
  positionId String   @db.ObjectId
  position   Position @relation(fields: [positionId], references: [id])
}

model Type {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  headers Header[]
  rows    Row[]
}

model Header {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  display  String
  key      String
  datatype String
  typeId   String @db.ObjectId
  type     Type   @relation(fields: [typeId], references: [id])
  cells    Cell[]
}

enum Platform {
  PC
  Mobile
  PC_MB
}

// (auth)
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  username      String?
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isSuperAdmin  Boolean         @default(false)
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([username], map: "unique_username_nullable") // This unique constraint will be enforced by MongoDB
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID        String
  userId              String  @db.ObjectId
  providerAccountId   String
  credentialPublicKey String
  counter             Int
  credentialDeviceType String
  credentialBackedUp  Boolean
  transports          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
//db.getCollection('User').createIndex(
//   { username: 1 },
//   { unique: true, sparse: true, partialFilterExpression: { username: { $exists: true, $ne: null } } }
// );